/* Generated By:JavaCC: Do not edit this line. CSVReader.java */
package kabuLab2;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
class CSVReader implements CSVReaderConstants {
//Reference: http://itref.fc2web.com/java/javacc.html

        //field
        private static ArrayList<ArrayList<String>> arrTable;
        private static ArrayList<String> arrRow;
        private static int cntOfC;
        private static int cntOfR;
        private String str="";
        private static int maxC;

        //constructor
        public CSVReader(String text) throws FileNotFoundException, ParseException
        {
                //Following code is also available
                //InputStream in = new BufferedInputStream(new FileInputStream(String pass));
                //Reference: http://park1.wakwak.com/~ima/java_tips0011.html
                InputStream in = new ByteArrayInputStream(text.getBytes());
                new CSVReader(in).Input();
                getCntOfC();
        }

        public int getCntOfC()
        {
                return maxC;
        }

        public int getCntOfR()
        {
                return cntOfR;
        }

        private void actionOfDelimiter()
        {
                cntOfC++;
                arrRow.add(str);
                str="";
        }

        private void actionOfNewline()
        {
                if(str.length()!=0)
                {
                        actionOfDelimiter();
                }
                cntOfR++;
                if(maxC<cntOfC)
                {
                        maxC=cntOfC;
                }
                arrTable.add(arrRow);
                arrRow=new ArrayList<String>();
                cntOfC=0;
        }

        private void actionOfMyEof()
        {
                if(arrRow.size()!=0 || str.length()!=0)
                {
                        //if(arrRow.size()!=0){cntOfR--;}
                        actionOfNewline();
                }
                if(maxC<cntOfC)
                {
                        maxC=cntOfC;
                }
        }

        public ArrayList<ArrayList<String>> getArrTable()
        {
                return arrTable;
        }

  final public void Input() throws ParseException {
        maxC=0;
        Token token;
        cntOfC=0;
        cntOfR=0;
        arrTable=new ArrayList<ArrayList<String>>();
        arrRow=new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      token = jj_consume_token(CELL);
                        str = token.image;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELIMITER:
        case NEWLINE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELIMITER:
          jj_consume_token(DELIMITER);
                                actionOfDelimiter();
          break;
        case NEWLINE:
          jj_consume_token(NEWLINE);
                                actionOfNewline();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(MyEOF);
                actionOfMyEof();
  }

  /** Generated Token Manager. */
  public CSVReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x6,0x6,};
   }

  /** Constructor with InputStream. */
  public CSVReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSVReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSVReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CSVReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSVReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CSVReader(CSVReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CSVReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[7];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 7; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
