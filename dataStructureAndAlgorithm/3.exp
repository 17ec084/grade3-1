<(3前)データ構造とアルゴリズム3,t>正規表現では取り扱えないような言語を取り扱えるようにするため、より強力な文法の記述法を考える。{{br}}具体的には(ア)ような文法を考える。以降では(イ)と呼ばれるものを考える。{{br}}(イ)では、(ウ)の集合Vn、(エ)の集合Vt、(オ)P、(カ)S(∈Vn)の4つの組で表す。


(ア):文が特定の品詞の組み合わせで出来ている{{br}}(イ):バッカス・ナウア記法{{br}}(ウ):非終端記号{{br}}(エ):終端記号{{br}}(オ):ルール{{br}}(カ):開始記号
バッカス・ナウア記法において、終端記号とは何か


生成する文字列を作るアルファベット
バッカス・ナウア記法において、「ルール」はどう表されるか


(非終端記号) ::= (非終端記号と終端記号の列) {{br}}または{{br}}(非終端記号) → (非終端記号と終端記号の列)
開始記号とは何か


非終端記号のどれか一つ。{{br}}どれを選ぶべきかを言葉で説明するのは困難を極める。{{br}}以降に示す例を確認して感じ取ってほしい。
Vn=｛文,主語,述語,補語,名詞句,動詞,代名詞,冠詞,名詞｝{{br}}Vt=｛This, is, a, pen｝{{br}}S=文{{br}}とする。{{br}}Pに関しては、次のようにする。{{br}} {画像=35.png} {{br}}ここからThis is a penという文字列を生成する手順を考えよう。{{br}}まず(ア)なので、Pの「文」に関する記述を見てみる。{{br}}具体的に言うと、(イ)に「文」があるものを見る。{{br}}すると、{{br}}文 → 主語 述語 補語{{br}}とある。矢印が示すように、素直に(ウ)(エ)てみよう{{br}}さらに主語が(イ)のものも、述語が(イ)のものも、補語が(イ)のものもある。{{br}}これらも同様に(エ)る。{{br}}すると確かに(オ)にThis is a penという文字列を得る。


(ア):S=文{{br}}確かにこうやって、開始のタイミングで確認された。{{br}}(イ):左辺{{br}}(ウ):左辺である「文」を、右辺である「主語 述語 補語」に{{br}}(エ):置き換え{{br}}(オ):最後{{br}}置き換えを最「終」になる記号だから、「終端記号」なのかも。
Vn=｛文,主語,述語,補語,名詞句,動詞,代名詞,冠詞,名詞｝{{br}}Vt=｛this, Is, a, pen,?｝{{br}}S=疑問文{{br}}とする。{{br}}Pに関しては、次のようにする。{{br}} {画像=35.png} {{br}}ルールを修正し、疑問文Is this a pen?を生成できるようにせよ


疑問文 → 述語 主語 補語?
バッカス・ナウア記法において(ア)した文法を正規文法(正規表現)という。


(ア):ルールを「非終端記号→終端記号」または「非終端記号→終端記号 非終端記号」だけに制限
正規表現a＊をバッカス・ナウア記法で表せ{{br}}但し大文字は非終端記号(特にSは開始記号)、小文字は終端記号とする。


S → ε, S → aS
正規表現a＋をバッカス・ナウア記法で表せ{{br}}但し大文字は非終端記号(特にSは開始記号)、小文字は終端記号とする。


S → aN, N → ε, N → aN{{br}}(独自解釈)
正規表現.＊(a|b)をバッカス・ナウア記法で表せ{{br}}但し大文字は非終端記号(特にSは開始記号)、小文字は終端記号とする。


S → (任意のアルファベット)S , S → a, S → b
文脈自由文法とは何か


「ルール」において、左辺が「非終端記号1個だけ」であるもの
バッカス・ナウア記法においてルールを「非終端記号→終端記号」または「非終端記号→終端記号 非終端記号」だけに制限した文法を正規文法(正規表現)という。{{br}}これを証明してみよう。{{br}}まず、ルールから非決定性オートマトンがつくれることを示す。{{br}}各非終端記号を(ア)とみる。{{br}}当然開始記号は(イ)となる。{{br}}ルール「A→bC」は(ウ)に例えられる。{{br}}ルール「A→b」は(エ)に例えられる。{{br}}ルール「A→C」は(オ)に例えられる。{{br}}さて、今回ルールからオートマシンへの変換は1対1であり、逆も成り立つことが容易にわかるだろう。{{br}}ゆえに今回のルールと非決定性オートマトンは等価である。したがって、正規文法と同じものである。


(ア):オートマトンの状態(ノード){{br}}(イ):開始ノード{{br}}(ウ):ノードAからノードCへ矢印bが出ていること{{br}}(エ):終端文字だけになったので終わり。即ちノードAから終端ノードへの矢印b{{br}}(オ):ウで矢印がεであること
整数をバッカスナウア記法の正規文法で表現せよ


S → -N, S → N, N → ［1-9］, N → N［0-9］{{br}}［-］は、冗長化を防ぐために使った。
バッカス・ナウア記法における記号列の生成は、木構造で表すことができる。{{br}}その例が(ア)である。(ア)では、A → bCDというルールを(イ)のように表すことができる。{{br}}Vn=｛文,主語,述語,補語,名詞句,動詞,代名詞,冠詞,名詞｝{{br}}Vt=｛This, is, a, pen｝{{br}}S=文{{br}}とする。{{br}}Pに関しては、次のようにする。{{br}} {画像=35.png} {{br}}ここからはThis is a penという文字列(だけ)が生成加納である。{{br}}これを(ア)で表すと、(ウ)のようになる。


(ア):構文解析木{{br}}(イ):{画像=36.png} {{br}}(ウ):{画像=37.png}
文法が曖昧であるとは(情報工学(や、言語学(？))において)どういうことか説明せよ


一つの記号列について、複数の構文解析木を持つ文法
☆を、揚げ足をとられぬよう英訳せよ{{br}}{{br}}魚屋店主「ﾗｯｼｬｯｾｰ,ｱｲﾔｽｲﾖﾔｽｲﾖｰ」{{br}}はは「あらやすいわね〜、あんたたち今日はどの魚食べたい？」{{br}}むすこ「アナゴ！」{{br}}むすめ(☆)「わたしはうなぎです。」{{br}}むすか「それなら水槽へ戻り給え。陸は人間しか上がれない聖域なのだ」{{br}}みじめ「解せぬ」


I want to eat うなぎ.{{br}}別の意味への解釈の余地をなくすことができた。これは訳す際に構文を意識したことの紛れもない証拠なのだ。
足し算の数式を解釈する文法を考えよう。{{br}}非終端記号を「和」、終端記号を「数」と「＋」とする。{{br}}ルールを作れ。


「和 → 和 ＋ 数 , 和 → 数」{{br}}など。{{br}}「和 → 数 ＋ 数」だと、1+2+3などに対応できない。




















</>
<pass==pass>