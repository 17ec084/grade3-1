<(3前)データ構造とアルゴリズム1,t>javaで、クラスA型変数aを定義せよ。


A a = new A();
クラスを作る場合、通常はフィールド(変数)は(ア)宣言をする。{{br}}その他(イ)と(オ)も作る。{{br}}クラスを利用する際は(イ)が(ウ)ることで(エ)を生成する。{{br}}「(エ).(オ)」の形で(オ)を呼び出したり、(イ)が(オ)を呼び出したりすることで、(カ)に対して情報処理を行う。


(ア):private{{br}}(イ):コンストラクタ{{br}}(ウ):呼び出され{{br}}(newを付けて、最初に宣言するとき。正確には違うかもしれない。。。){{br}}(エ):インスタンス{{br}}(オ):メソッド{{br}}(カ):変数(フィールド)
クラスを作る場合、通常はフィールド(変数)はprivate宣言をする。{{br}}その他コンストラクタとメソッドも作る。{{br}}クラスを利用するときは、「インスタンス.メソッド」の形でメソッドを呼び出すことがある。{{br}}このとき、メソッド名は(ア)であるとよい。{{br}}こうすることで、クラスを利用するときのプログラムが、あたかも(イ)の英語の文章であるかのように読める。


(ア):分かりやすい英語の動詞{{br}}(イ)変数名が主語、メソッド名が動詞、引数が目的語
クラスを利用するときは、「インスタンス.メソッド」の形でメソッドを呼び出すことがある。{{br}}このとき、メソッド名は動詞であるとよい。{{br}}こうすることで、クラスを利用するときのプログラムが、あたかも{{br}}変数→主語{{br}}メソッド→動詞{{br}}メソッドの引数→目的語の英語の文章であるかのように読める。{{br}}Humanクラス型変数iを使って、簡単な第三文型英文を作り、それをjavaのプログラム風に言い換えよ。


Human i = new Human();{{br}}解答例1:i am 20.(私は20歳です)→i.am(20);{{br}}解答例2:i love you.→i.love(you);
メソッド名を簡単な英語の動詞にすることで、クラスを利用するときのプログラムがあたかも英文であるかのように、読みやすくできるのであった。{{br}}しかし、読みやすい英文だけでプログラムを完成させることができるとは限らない。{{br}}どこかで「難しい仕組み」(実はこれこそ「アルゴリズム」です)が必要になってくるが、どこに書くべきか。


クラスを作るとき{{br}}(つまり、{{br}}Human i = ...{{br}}のところではなくて、{{br}}class Human{ ... {{br}}とかのところ)
class 子 extends 親とはどういうことか


クラスの継承を表す。{{br}}親クラスで定義したフィールドやメソッドを、子クラスでも使えるようになる。
親クラスで定義したフィールドやメソッドは、子クラスに継承できる。{{br}}継承した上、メソッドの内容やフィールドの値を(独自に)変えてしまうことができる。{{br}}これを何というか


オーバーライド
国の法律で「子供は夜8時以降外に出てはいけない」と決まっていたとする。{{br}}この国にある県で、この法律をオーバーライドする条例を制定してみよ


「子供は夜7時以降外に出てはいけない」など。
シグネチャとは何か


メソッド名および引数の個数
親クラスのメソッドが、子クラスにオーバーライドされるとする。{{br}}すると(ア)クラスと(イ)の両方で(ウ)宣言をすることで、(エ)できる。(というか、そうしなければならない){{br}}これを(オ)クラスとか(オ)メソッドとかいう。


(ア):親{{br}}(イ):そのメソッド{{br}}(ウ):abstract{{br}}(エ):そのメソッド内のプログラムを省略{{br}}(オ):抽象
抽象とは何か。曖昧とはどう異なるか。説明せよ。


対「象」の特徴を「抽」出すること。{{br}}広いグループで考えること。{{br}}「長方形」とか「円」とかに対して、「図形」のこと。{{br}}一般化して考えたため、故意に広い意味を持たせたのが抽象であり、いい加減に考えたため結果的に広い意味を持ってしまったのが曖昧。{{br}}これは僕の独自解釈。
Shapeクラスを抽象クラスとし、{{br}}Rectangle extends Shapeクラスを非抽象クラスとする。{{br}}インスタンスの作り方として正しくない例と正しい例をそれぞれ示せ。{{br}}但し、引数は空とせよ


Shape a = new Shape();は正しくない{{br}}Shape a = new Rectangle();は正しい。
interface宣言とは何か


abstractメソッドのみからなる抽象クラスを宣言するもの。{{br}}子クラスに対してはextendsの代わりにimplementsを使う。(「継承」の代わりに「実装」)
抽象クラスの考え方が「型と実装を分離する発明」であるという意見は、何を言わんとしているか、考えてみよう。{{br}}この命題(意見だから本当は命題ではないけど)の対偶をとると、(ア)となる。{{br}}ここから、非抽象クラスでは型と実装の関係について(イ)の3パターンの関係があり得るということになる。{{br}}型が実装に依存というのは意味不明だから、{{br}}「実装が型に依存している」ということになる。{{br}}もっとわかりやすく言えば、(ウ)ということだ。抽象クラスでは確かに(ウ)のようなことは工夫次第で極力減らせる。


(ア):型と実装の間に切っても切れない関係があるのは「非抽象クラス」である{{br}}(イ):互いに依存、型が実装に依存、実装が型に依存{{br}}どんな機能が実装できるかは、型によってある程度決まってしまう
ポリモーフィズムとは何か


複数の子クラスでメソッドをオーバーライドすることで、クラスごとに処理を変えること
デザインパターンとは何か


特定の処理に対して、オブジェクト指向の考え方を活かす手法
デザインパターンの一つである、コピーコンストラクタとは何か。また例を示せ。


自分と同じクラス型の引数を受け取ることで、引数として渡された変数の全フィールドを、出力として渡された変数にコピーしてしまうというもの。{{br}}クラスA内でpublic A(A a){ x=a.x; (...略) } {{br}}のようにすること。
デザインパターンの一つである、テンプレートとは何か。


親クラスが文字列を返す場合、メソッドを抽象化(abstruct宣言等)し、子クラスで書式を指定する形で実装する手法
デザインパターンの一つである、シングロトンとは何か。


インスタンスを一つだけにする手法。
Aのインスタンスが1つしか存在できぬよう、シングロトンを作った。穴埋めせよ。{{br}}public class A { {{br}}private static A instance; {{br}}(ア) A(){} {{br}}public static A getInstance(){ {{br}}(イ) {{br}}return instance; {{br}} } {{br}} }


(ア):private{{br}}コンストラクタをprivate化することで、インスタンスの自動生成を防ぐ{{br}}(イ):if(instance == null){ instance = new A(); } {{br}}instanceが存在しなかったときだけ、newして作る。
プログラム(のコード)は、全ての処理を曖昧なく記述したものであるが、「データの関係」とか「フロー」など、(ア)でプログラムの構造を理解したい場合がある。{{br}}こういうときに、プログラムを図表で表すスキルが役立つ。{{br}}プログラムを修正するだけにしても、それに付随して必要になるタスクを列挙すると、(イ)となる。{{br}}これらを、コードそのものを読みながら決めるのは大変である。{{br}}その為これらを検討するための書類を作るとき、(ア)でプログラムの構造を描いてあると、役立つ。


(ア):特定の切り口{{br}}(イ):書式の決定、フローの変更点、サービスへの影響の評価、確認画面の追加、今後のオペレーションをだれがやるか
UMLとは(ア)の略で、オブジェクト指向のソフトウェアを設計、解析、理解、記述するときに使う記述法である。{{br}}最近ではUMLでプログラミングすることもできるそうだ。{{br}}UML 2.0では13種類の図があり、それらは(イ)に大別できる。


(ア):Uniformed Modeling Language(統一モデリング言語){{br}}(イ):構造図と振る舞い図
UMLの図の一種であるオブジェクト図は、(ア)を表す図である。{{br}}これは、(イ)という関係を(ウ)ことにより記述するものである。


(ア):プログラムのある一点でのオブジェクト関連{{br}}(イ):オブジェクトのメンバ(フィールドやメソッド)が、他のオブジェクトを参照している{{br}}(ウ):オブジェクトを面積のある図形で書き、参照を矢印で表す
メソッド内で他のオブジェクトを単にローカル変数のように使用する場合、「関連」といい、単なる矢印で表す。{{br}}次のコードを表すオブジェクト図をかけ。{{br}}{{画像=1.png}}


{画像=2.png}
オブジェクト内に他のクラスのオブジェクトをメンバとして持つのを、「集約」と言う。{{br}}これは収納される側は矢印ですが、収納する側は白抜きの菱形が付いた線で表す。{{br}}次のオブジェクト図に対応するコードの例を示せ。{{br}}{画像=3.png}


{画像=4.png}
次のオブジェクト図は何を表すか。また対応するコードをかけ{{br}} {画像=5.png}


オブジェクトを生成する時に他のクラスのオブジェクトを同時に生成し、メソッドを透過的に使用するもの。{{br}}コンポジション{{br}} {画像=6.png}
プログラムの具体的な動きを無視して、(ア)を明らかにしたいとき、クラス図を使う。{{br}}クラス図は、(イ)することに役立つ。


(ア):オブジェクト間の関係{{br}}(イ):仕様変更のときなどに修正部分を把握
クラス図では、(ア)とき、[A]→[B]のように書く。{{br}}矢印で関係を示すだけでなく、長方形を横棒2つで区切り、3つの欄に分ける。{{br}}上から順に、(イ)を書く。


(ア):クラスAがクラスBのフィールドを持つ{{br}}(イ):クラス名、属性(フィールド)、操作(メソッド)
クラス図にフィールドを書くときの記法を言え。


可視性 名前: 型 多重度 = デフォルト値{プロパティ文字列}
クラス図のフィールドの記法において、可視性とは何か


publicなら＋、privateなら−
クラス図にメソッドを書くときの記法を言え。


可視性 名前(パラメータリスト): 戻り値の型{プロパティ文字列} {{br}}参考資料:http://www.itsenka.com/contents/development/uml/class.html
次のコードに対応するクラス図をかけ{{br}} {画像=8.png}


{画像=9.png}
次のコードに対応するクラス図をかけ{{br}} {画像=10.png}


{画像=11.png}
次のコードに対応するクラス図をかけ{{br}} {画像=12.png}


{画像=13.png}
次のコードに対応するクラス図をかけ{{br}} {画像=14.png}


{画像=15.png}
UMLの一種であるユースケース図について説明せよ


ユースケース図では考えられる様々な仕事を楕円(ユースケース)の中に記述し、その仕事をする人(アクター)を各ユースケースに関連づける。{{br}}ユースケースは長方形(サブジェクト)の中に入れ、その外側にアクターを配置する。
多くのWebページでは(ア)で画面が変化するため、各画面を(イ)とみなすことができる。{{br}}どのような入力で(イ)が切り替わるか分析したものが(ウ)図である。{{br}}そのため、どのような入力で「画面」が切り替わるかを表現すれば、(ウ)図になる場合が多い。


(ア):利用者の入力{{br}}(イ):状態{{br}}(ウ):状態マシン
Webショッピングモールの状態マシン図の例を示せ


{画像=16.png}
UMLには「アクティビティ図」というものがあり、フローチャートに対応する図である。{{br}}ログイン認証の仕組みの例をアクティビティ図で示せ


{画像=17.png}
UMLの一種であるシーケンス図(相互作用図)は、(ア)を表すものである。{{br}}まず各変数を表す長方形を書き、そこから下に向かって点線を引く。これを(イ)という。{{br}}実際に変数を使用するタイミングになったら、(イ)の上に長細い長方形を書く。{{br}}そしてメッセージを送るオブジェクトから送られるオブジェクトに矢印と(ウ)を書く。そして反対側の矢印で(エ)を送る。


(ア):オブジェクト相互のメッセージのやり取り{{br}}(イ):生存線{{br}}(ウ):メソッド{{br}}(エ):戻り値
int a = b.c(d);{{br}}をシーケンス図にせよ


{画像=18.png}
次のコードに対応するシーケンス図を示せ。{{br}} {画像=19.png}


{画像=20.png}</>
<pass==pass>