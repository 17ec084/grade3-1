宿題4に示した通り、別の回路(またはゲート)を組み合わせて作ったより複雑な回路は、論理式の性質を生成ルールとする文脈自由文法による構文分析木を書くことで構造を明らかにすることができる。
これを利用して、トランジスタ、L、C、R、電圧源、端子、導線の組み合わせで論理回路を自動設計したり、あるいはトランジスタ等で表された回路を解析したりできるプログラムの設計について議論していこう。

吟味1 回路の表現

文脈自由文法で生成できる記号列(すなわち言語)は記号の列であるから、記号の集合体である必要があり、しかもそのままでは2次元方向に広がる回路を表現することはできない。
そこで、回路を一意に表現するトークン行列を定義し、これをトークン列に変換する必要がある。(生成ルールの一部が決まる)

unicodeでは┿や┥などの罫線素片が定義されており、これと文字(抵抗ならR、トランジスタならTなど)によって回路を表現できる。

例えばNANDゲートをトランジスタで構築した回路は次のようにトークン行列で表現できる。



□=coord(0,0);
Ｔ=bipolarTransistorNPN(B=←&C=↑&E=↓);
Ｒ=resistor(5);
ｖ=battery(5,V,↓);
Ｖ=battery(10,V,↑);
Ｅ=Earth();
Ａ=terminal(A,i);
Ｂ=terminal(B,i);
Ｏ=terminal(O,o);
Ｐ=terminal(zero,Earth);


　　　□　　　┌┳Ｏ
　　　┌Ｒ┳─ＴＲ
　　　Ａ　Ｒ　││
　　　　Ｒ┼┳ＴＶ
　　　　││Ｒ││
　　　Ｂ┘└┫││
　　　　　　ｖ││
　　　Ｅ──┻┻┻Ｐ

terminalとして与えられている部品は、A,B,O,Pの4つである。  
これらは4辺のいずれかに位置する必要がある。今回の例ではA,Bは左辺(上辺でも下辺でもない)、Oは右辺にして上辺、Pは右辺にして下辺に位置している(※)。  
導線の太字は交点の存在を意味する。また□は原点(0,0)を意味する。  
右に行くほどxがインクリメントされ、下に行くほどyがインクリメントされる。
例えば座標(0,2)はAであるし、(6,0)はOである。  

gate(NAND)を左辺、上に示した回路を右辺とする生成ルールを作る必要がある。  
しかし、そのままでは扱いにくいため、次のようにする。  

1. yの最大値+1を求める(今回は8)  
2. 次のように、縦の並びを横にしなおす。  

□┌Ａ　　Ｂ　Ｅ　Ｒ　Ｒ│┘　─　┳Ｒ┼│└　─　─　┳Ｒ┫ｖ┻┌Ｔ│Ｔ│││┻┳Ｒ│Ｖ│││┻Ｏ　　　　　　Ｐ

縦(y)の大きさをsとするとき、任意の座標のnつ下はn文字後、nつ右はs×n文字後に表現される。
つまり、
(0,0)(0,1),(0,2),...(0,7),(1,0),(1,1),(1,2),...(1,7),(2,0),(2,1),...
のようになる。

次に、呼び出し部分を決める

□=coord(0,-1);
ａ=A.gate(NAND);
ｂ=B.gate(NAND);
ｏ=O.gate(NAND);
×=forbidden();

　□
　　×
　　ａｏ
　　ｂ×
　　×

aは「NANDゲート」の定義で示すところのAに、bはBに、oはOに該当する。×は、その座標を通じて端子へ接続することを禁止するものである。  
※より、例えばOは右辺かつ上辺に位置したが、このことを引き継ぎ、oも右辺かつ上辺に位置するようにする。  
A,Bは左辺であるが上辺でも下辺でもない。このことを満たすため、「配線不可の座標」である×も指定する。 
×を減らすには、「NANDゲート」を定義する際、出力端子はなるべく4隅に設置するのが望ましかった。

以下に、NANDゲートを用いて構築したXORゲートを示す。

□=coord(0,-1);
ａ=A.gate(NAND);//n.mは「mの定義における端子n」
ｂ=B.gate(NAND);
ｘ=X.gate(NAND);
Ａ=terminal(A,i);
Ｂ=terminal(B,i);
Ｏ=terminal(O,o);

　□
　Ａ┳───ａｏ┐　┌Ｏ
　　└ａｏ┳ｂ　└ａｏ
　　┌ｂ　└ａｏ─ｂ
　Ｂ┻───ｂ

吟味2 半導体素子設計用プログラム

情報通信デバイスの講義で、半導体に埋め込む回路を設計・点検する煩雑さについて知った。  
このような作業をプログラムが自動で行うためのプログラムを設計する。

今回は例として、「トランジスタで表現されたNANDゲート」と「NANDゲートで表現されたXORゲート」を組み合わせ、  
「(トランジスタで表現されたNANDゲート)で表現されたXORゲート」を自動で設計するプログラムを考える。

これに成功すれば、「トランジスタで表現された回路(1)」、「回路(1)で表現された回路(2)」、...、「回路(n-1)で表現された回路(n)」さえ用意すれば、  
「トランジスタで表現された(中略)回路(n)」をプログラムで自動生成できるということになる。  

　□
　Ｃ┳───ａｘ┐　┌Ｑ
　　└ａｘ┳ｂ　└ａｘ
　　┌ｂ　└ａｘ─ｂ
　Ｄ┻───ｂ

から  

×
ａｏ
ｂ×
×

すなわちNANDゲートを探し、  


　　　□　　　┌┳３
　　　┌Ｒ┳─ＴＲ
　　　１　Ｒ　││
　　　　Ｒ┼┳ＴＶ
　　　　││Ｒ││
　　　２┘└┫││
　　　　　　ｖ││
　　　Ｅ──┻┻┻Ｐ

に置き換え(、１、２、３は導線で置き換え)ることを考える。

アルゴリズムとしては、次のようなものが考えられる。まずはこれに従い、手動で生成してみよう。
aを1、bを2、oを3で置き換え、亀裂を整える。(手順1)  
生じた亀裂を復元する。(手順2)  
埋め込む(手順3)  

吟味2-1 手順1

ａはＸＯＲゲートの座標系では例えば(5,0)に存在するが、これを(0',2')と呼ぶ。  
(これは、NANDゲートにおいて(0,2)にAが存在するからである。)
ＮＡＮＤゲートでは右下端の座標は(6,7)となる。  
そこで、(0',2')から(6',9')にＮＡＮＤゲートを埋め込むことを考える。  

言い換えると、(2,1)から(8,7)にＮＡＮＤゲートを埋め込むわけである。  
当然このことによって、互いに隣接していたｂ、ａ、ｘはそれぞれＢ、Ａ、Ｏとして、離れ離れになり、  
回路全体に「亀裂」が生じる。その様子を次の「＝＝」、「||||」にて示す。 


　□
　Ａ┳─||||||||||──ａｏ┐　┌Ｏ
　＝＝　　　　　　３┳ｂ　└ａｏ
　＝＝　　　　　　　＝＝＝＝＝＝＝
　　└１　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　　┌２　　　　　　└ａｏ─ｂ
　＝＝　　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　Ｂ┻─||||||||||──ｂ

吟味2-2 手順2

手順1で生じた亀裂を復元する。  

まず最優先で復元すべきなのは、ａ、ｂ、ｏの塊りの間に生じた亀裂である。  
各ａから、「＝」や「||」を一直線最遠方までたどった道筋を矢印で置き換えると次のようになる。  


　□
　Ａ┳─||||||||||──ａｏ┐　┌Ｏ
　＝＝　　　　　　３┳ｂ　└ａｏ
　＝＝　　　　　　　＝↑＝＝↓＝＝
　　└１　　　　　　＝↑＝＝↓＝＝
　＝＝　　　　　　　＝↑＝＝↓＝＝
　＝＝　　　　　　　＝↑＝＝↓＝＝
　　┌２　　　　　　└ａｏ─ｂ
　＝＝　　　　　　　＝↓＝＝＝＝＝
　＝＝　　　　　　　＝↓＝＝＝＝＝
　Ｂ┻─||||||||||──ｂ

ｂやｏに(正しく)ぶつかった場合、それをａの隣まで移動させ、その経路を導線で置き換える。  
このことに寄与しなかった↑と↓は＝に、←と→は＝に再び置き換える。  


　□
　Ａ┳─||||||||||──ａｏ┐　┌Ｏ
　＝＝　　　　　　３┳ｂ　└ａｏ
　＝＝　　　　　　　＝＝＝＝ｂ＝＝
　　└１　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　　┌２　　　　　　└ａｏ─┘
　＝＝　　　　　　　＝ｂ＝＝＝＝＝
　＝＝　　　　　　　＝│＝＝＝＝＝
　Ｂ┻─||||||||||──┘


しかし、ｂは左から接続する必要がある(このために「×」がある)ので、次のように書き換える必要がある。  


　□
　Ａ┳─||||||||||──ａｏ┐　┌Ｏ
　＝＝　　　　　　３┳ｂ　└ａｏ
　＝＝　　　　　　　＝＝＝┌ｂ＝＝
　　└１　　　　　　＝＝＝└┐＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　　┌２　　　　　　└ａｏ─┘
　＝＝　　　　　　　┌ｂ＝＝＝＝＝
　＝＝　　　　　　　└┐＝＝＝＝＝
　Ｂ┻─||||||||||──┘

次に、然るべき亀裂を導線に置き換える。

具体的に述べると、パターン1はパターン2のように置き換えられるべきである。  
  
パターン1  

('│' | '┳' | '┌' | '┐')//←正規表現。$1で参照。
＝

パターン2

($1)
│

上下逆や横の場合も同様のことがいえる。  

これを繰り返すと、次のようになる。  

　□
　Ａ┳────────ａｏ┐　┌Ｏ
　＝│　　　　　　３┳ｂ　└ａｏ
　＝│　　　　　　　│＝＝┌ｂ＝＝
　　└１　　　　　　│＝＝└┐＝＝
　＝＝　　　　　　　│＝＝＝│＝＝
　＝＝　　　　　　　│＝＝＝│＝＝
　　┌２　　　　　　└ａｏ─┘
　＝│　　　　　　　┌ｂ＝＝＝＝＝
　＝│　　　　　　　└┐＝＝＝＝＝
　Ｂ┻────────┘


亀裂のマークを取り除くと

　□
　Ａ┳────────ａｏ┐　┌Ｏ
　　│　　　　　　３┳ｂ　└ａｏ
　　│　　　　　　　│　　┌ｂ　　
　　└１　　　　　　│　　└┐　　
　　　　　　　　　　│　　　│　　
　　　　　　　　　　│　　　│　　
　　┌２　　　　　　└ａｏ─┘
　　│　　　　　　　┌ｂ　　　　　
　　│　　　　　　　└┐　　　　　
　Ｂ┻────────┘

吟味2-3 手順3

手順2までで、埋め込みに際する諸問題を取り除いてあるため、NANDゲートの中身をそのまま埋め込むだけでよい。  
NANDゲートを定義する座標における(x,y)は、XORゲートの座標(2+x,1+y)に写される。  


　□
　Ａ┳────────ａｏ┐　┌Ｏ
　　│　　　　┌┳３┳ｂ　└ａｏ
　　│┌Ｒ┳─ＴＲ　│　　┌ｂ　　
　　└１　Ｒ　││　│　　└┐　　
　　　　Ｒ┼┳ＴＶ　│　　　│　　
　　　　││Ｒ││　│　　　│　　
　　┌２┘└┫││　└ａｏ─┘
　　│　　　ｖ││　┌ｂ　　　　　
　　│Ｅ──┻┻┻Ｐ└┐　　　　　
　Ｂ┻────────┘

端子１〜３に意味はないため、導線で置き換える。


　□
　Ａ┳────────ａｏ┐　┌Ｏ
　　│　　　　┌┳─┳ｂ　└ａｏ
　　│┌Ｒ┳─ＴＲ　│　　┌ｂ　　
　　└┘　Ｒ　││　│　　└┐　　
　　　　Ｒ┼┳ＴＶ　│　　　│　　
　　　　││Ｒ││　│　　　│　　
　　┌─┘└┫││　└ａｏ─┘
　　│　　　ｖ││　┌ｂ　　　　　
　　│Ｅ──┻┻┻Ｐ└┐　　　　　
　Ｂ┻────────┘

吟味2-4 プログラムの実現性

手順1から3に従い、残りのａ、ｂ、ｏも置き換えると、次のようになる。(回路XOR(NAND(Transistor))と呼ぶことにする)  

　　　　　　　　　　　　　　　┌┳──────┐　　　　　　┌Ｏ
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　　　　　　│　
　Ａ┳────────┘　Ｒ　││　　　　　　│　　　　　　│　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　　　　　　│　
　　│　　　　　　　　　││Ｒ││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳┘
　　│　　　　　　　　　│││││　　　　　　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳─┘└┫││　　　　　　└┘　Ｒ　││　
　　│　　　　││　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　　　　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　　┌─┘└┫││
　　│　　　　││　│　　　│││　　　　　　│　　　ｖ││
　　│　　　　││　│　　　│││　　　　　　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘　　　　　　　
　　└┘　Ｒ　││　│　　　　　　　　　　　　└┐　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳──┘　　　　　　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　　　
　　┌─┘└┫││　└─────┘　Ｒ　││　　　　　　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　　　　　　
　　│　　　ｖ││　┌──────┘└┫││　　　　　　　　　
　　│　　　│││　│　　　　　　　　ｖ││　　　　　　　　　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ└─────┐　　　　　　　　　　　　　　　
　Ｂ┻─────────────┘　　　　　　　　　　　　　　　　　　　

以上のように、トランジスタで表現されたXORゲートが手動で生成できる。

そして、手順1〜3の操作はすべて定量的、明確つまり一意的に示されているため、プログラムでも実現可能である。


吟味3 構文解析木による回路解析

吟味3-1 基本


では、回路XOR(NAND(Transistor))がNANDゲートによって(どのように)構成されていて、そのNANDゲートがTransistorで(どのように)構成されている(のか)ということを解析するための木構造を返すプログラムを考えよう。

まず、その回路の「本質」をどうとらえることができるかを考える必要がある。

例えば、回路XOR(NAND(Transistor))で、導線を単純化すると、次のようになるが、本質は回路XOR(NAND(Transistor))と全く同じであり、すなわち回路解析の結果は同じにならなければならない。

　　　　　　　　　　　　　　　┌┳──────┐　　　　　　┌Ｏ
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　　　　　　│　
　Ａ┳────────┘　Ｒ　││　　　　　　│　　　　　　│　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　　　　　　│　
　　│　　　　　　　　　││Ｒ││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳┘
　　│　　　　　　　　　│││││　　　　　　└─Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳─┘└┫││　　　　　　　　　Ｒ　││　
　　│　　　　││　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　　　　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　┌──┘└┫││
　　│　　　　││　│　　　│││　　　　　│　　　　ｖ││
　　│　　　　││　│　　　│││　　　　　│　Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　│　　　　　　　　　
　　└─Ｒ┳─ＴＲ　│　　　　　　　　　　　│　　　　　　　　　
　　　　　Ｒ　││　│　　　　　　　　　　　│　　　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　│　 　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　│　　　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳┻　　　　　　　　　
　　　　│││││　└──────Ｒ┳─ＴＲ　　　　　　　　　　
　　┌─┘└┫││　　　　　　　　　Ｒ　││　　　　　　　　　　
　　│　　　│││　┌──────Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　│　　　　　　　│Ｒ││　　　　　　　　　　
　　│　　　ｖ││　│　　　　　　　└┫││　　　　　　　　　
　　│　　　│││　│　　　　　　　　ｖ││　　　　　　　　　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　　　　　　　　　
　Ｂ┻───────┘　

普段私たちが2つの回路が同じものであるかを見比べるときは、次の要素を見比べているだろう。

「素子がつながる順番」、「素子の向き」、「分岐の仕方」

にどのようにしているのかを明確に述べ、それを基準に取り出せばよい。

これは木構造で一意に表せそうである。
木構造を生成するにあたって、閉回路のどこかを切り開く必要が出てくるが、これは「素子そのもの」で切り開けばよい。

簡単のために、回路XOR(NAND(Transistor))の各部品を次のように数字(座標(x,y)に対し、sx+yを考え、この数値が小さい順につけた通し番号)で置き換えて説明する。この数字をアドレスと呼ぶ。

　　　　　　　　　　　　　　　┌┳──────┐　　　　　　┌49
　　　　　　　　　　　┌17┳─2224　　　　　　│　　　　　　│　
　01┳────────┘　19　││　　　　　　│　　　　　　│　
　　│　　　　　　　　　18┼┳2325　　　　　　│　　　　　　│　
　　│　　　　　　　　　││20││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳┘
　　│　　　　　　　　　│││││　　　　　　│┌39┳─4446　
　　│　　　　┌┳15┳─┘└┫││　　　　　　└┘　41　││　
　　│　　　　││　│　　　│││　　　　　　　　40┼┳4547
　　│　　　　││　│　　　│││　　　　　　　　││42││
　　│　　　　││　│　　　21││　　　　　　┌─┘└┫││
　　│　　　　││　│　　　│││　　　　　　│　　　43││
　　│　　　　││　│　　　│││　　　　　　│38──┻┻┻48　　
　　│　　　　││　│16──┻┻┻27　　　　　└┐　　　　　　　
　　│┌04┳─0911　│　　　　　　　　　　　　┌┘　　　　　　　
　　└┘　06　││　│　　　　　　　　　　　　└┐　　　　　　　
　　　　05┼┳1012　│　　　　　　　　　　　　　│　　　　　　　
　　　　││07││　│　　　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳──┘　　　　　　　
　　　　│││││　│　　　　　┌28┳─3335　　　　　　　　　　
　　┌─┘└┫││　└─────┘　30　││　　　　　　　　　　
　　│　　　│││　　　　　　　　29┼┳3436　　　　　　　　　　
　　│　　　│││　　　　　　　　││31││　　　　　　　　　　
　　│　　　08││　┌──────┘└┫││　　　　　　　　　
　　│　　　│││　│　　　　　　　　32││　　　　　　　　　　
　　│　　　│││　│　　　　　26──┻┻┻37　　　　　　　　　　
　　│03──┻┻┻14└─────┐　　　　　　　　　　　　　　　
　02┻─────────────┘　　

01から木構造を作ると、例えば子ノードは17と04となり、どちらの子孫にもノード15が現れる。このことを持って、「そこに閉回路が存在する」ことを表現しているとみなせば、木構造で閉回路を表現したと考えることができる。

木構造を途中まで作ると、次の通り。
実際には全ての葉が「終」または「閉回路検知」となるまで続く。
(吟味3-2にて、文法を変更したので、本当は違う)

01
├04
│├06
││├07
│││├05
││││├02
│││││└終
││││└29
││││　├31　
││││　│├30
││││　││├28
││││　│││├15
││││　││││├09
││││　│││││├閉回路検知
││││　│││││└10
││││　││││└11
││││　││││　└12
││││　││││　　├03
││││　││││　　│└終
││││　││││　　├08
││││　││││　　│└閉回路検知
││││　││││　　├10
││││　││││　　│└閉回路検知
││││　││││　　└14
││││　││││　　　└終
││││　│││└18
││││　││└33
││││　│└32
││││　└34　
│││└10
││└08
│└09
└17

この木構造は、導線をたどることで枝分かれを検知し、数字の小さなものを上ノード、大きなものをしたノードとしている。
また、既知の数字が再び表れたとき(09など)は、子ノードを葉「閉回路検知」とし、親ノードの方向以外のすべての方向において、何ともつながっていない場合は、子ノードを葉「終」とする。

この手法により、本質的に同じ回路を同じ表現で表すことができる。

また、木構造は括弧を用いて記号列に簡単に変換できる。  

上の木構造なら

01→(04→(06→(07→(05→(02→終),(29→(31→(30→(28→(15→(09→閉回路検知,10),11→(12→(03→終),(08→閉回路検知),(10→閉回路検知),(14→終))),18),33),32),34)),10),08),09),17

と表される。(これは途中の「木構造言語」であり、実際には数字で終わることはない)

元の部品記号に置き換えると次のようになる。
Ａ→(Ｒ→(Ｒ→(Ｒ→(Ｒ→(Ｂ→終),(Ｒ→(Ｒ→(Ｒ→(Ｒ→(Ｏ→(Ｔ→閉回路検知,Ｔ),Ｒ→(Ｖ→(Ｅ→終),(ｖ→閉回路検知),(Ｔ→閉回路検知),(Ｐ→終))),Ｒ),Ｔ),ｖ),Ｔ)),Ｔ),ｖ),Ｔ),Ｒ

例えば04はNANDゲートの一部であるが、04から「→」及び分岐をたどっていくと、NANDゲートの構造が確認される。

従って、次のような生成ルールを用意すればよい。

NAND ::=  {NANDゲートの定義「Ｒ→(Ｒ→Ｒ,ｖ,(Ｔ→Ｔ))...」}

吟味3-2 木構造言語

ここで、木構造言語の厳密な定義を行う。

3-2-1 木構造言語の文法

木構造言語とは、ある規則により回路図を木構造に変換した記号列のことで、次の性質をもつものとする。

・すべての連続した回路図(どこかしらがつながっている回路図)を表現できる(完全性)

・何らかの一意な方法で、言語から、同じ意味を持つ回路図を復元できる(再現性)

・同じ回路図からは同じ記号列が得られる(弱い一意性)

・同じ意味を持つ回路図からは同じ記号列が得られる(強い一意性)


例えば

Ａ─Ｃ─Ｄ
│　│　│
└Ｂ┻─┘

をどのように変形したものを木構造言語とできるか考えよう。

もっとも左上に近い素子であるＡを根として木構造を作ることを考えよう。


次のように、Ａ以外の素子を(枝の個数)個に分裂させてみよう。
そして、分裂させたそれぞれは、1つの枝しか持たないようにする。(左の枝、上の枝、下の枝、右の枝の順)

Ａ─Ｃ　Ｃ　Ｃ─Ｄ　Ｄ
│　　　│　　　　　│　　
└Ｂ　Ｂ┻─────┘

例えば素子Ｂの枝は2つだから2個に、Ｃの枝は3つだから3個に分裂させる。

すると、閉回路が仮に失われ、これを整形すれば次のような木構造であるような構造が得られる。

Ａ
├Ｂ
└Ｃ

Ｂ
┣Ｃ
└Ｄ

Ｃ
└Ｄ

但し、太字は直接枝別れしているのではなく、導線を経て枝分かれしていることを示す

Ａを根とする木構造以外を、Ａを根とする木構造に連結すると、次のようになる

Ａ
├Ｂ
│┣Ｃ
││└Ｄ
│└Ｄ
└Ｃ

3-2-2 完全性および弱い一意性

全ての連続した回路図は、素子を分裂させることで完全な開回路(つまり、閉回路を一切含まない)に分解できる。

そしてこのことは、分裂させることで回路をすべて開いているのだから自明。

そして、木構造の性質により、開回路として開いたものは、必ず表現できる。(完全性)

また、枝の生成はすでに一意であるから、子ノードの順番を何らかの方法で一意に決めれば、弱い一意性が約束される。



3-2-3 再現性

この方法で表された回路を回路図に変換するためには、次の方法をとればよい。

1)葉に近く、かつ上のノードから順に

〇

〇
└〇

〇
├〇
└〇


〇
├〇
├〇
└〇


〇
├〇
├〇
：
└〇

のいずれかの形を取り出す。(なるべく下に示した形を取り出す)

やってみると、

Ｄ

Ｃ
└Ｄ

Ｂ
┣Ｃ
└Ｄ

Ａ
├Ｂ
└Ｃ

2)導線の関係を維持しつつ結合させる。このとき

〇
├〇
└〇

のようなものは

〇─〇
│
〇

にかえる。(枝変換、太字は例外)


まず

Ａ
├Ｂ
└Ｃ

と

Ｂ
┣Ｃ
└Ｄ

を枝変換、導線を維持して結合すると次のようになる。

→

Ａ─Ｃ
│
Ｂ

Ｂ
┣Ｃ
└Ｄ

→

Ａ─Ｃ
│┌┘
Ｂ┻Ｄ

次にこれと

Ｃ
└Ｄ


を結合すると

Ａ─Ｃ┐
│┌┘│
Ｂ┻Ｄ┘

となり、

Ａ─Ｃ─Ｄ
│　│　│
└Ｂ┻─┘

と同じ意味の回路図を再現できる。

証明: これは、回路図から言語に変換する手順の逆を曖昧さなく行っているだけなので当然である。 証明終わり

3-2-4 強い一意性

この言語自体には強い一意性はないが、この言語で生成された記号列を比較して強い一意性を確認することは可能である。左上に最も近い素子を根とする木構造であるため、回転された回路図では、根が異なるため、言語自体に強い一意性はない。

そこで、強い一意性を持たせるには、同じ意味の回路図を別の形で表現した2つの回路図(アとイとする)から得られるそれぞれの記号列を、「等価」とみなせる機構が必要である。

これは、イを言語にし、イから回路図アを再現できるか試せばよい。

Ｄ─┐
│　│
Ｃ─┫
│　Ｂ
Ａ─┘

をア、

Ａ─Ｃ─Ｄ
│　│　│
└Ｂ┻─┘

つまり

Ａ
├Ｂ
│┣Ｃ
││└Ｄ
│└Ｄ
└Ｃ

をイとしよう。

この言語で、アが描けるか試す。

まず、もっとも左上にある素子Ｄに注目する。

言語中でＤを探し、Ｄを含む

〇

〇
└〇

〇
├〇
└〇


〇
├〇
├〇
└〇


〇
├〇
├〇
：
└〇

のいずれかの形を取り出す(なるべく下に示した形を取り出す)と、


Ｃ
└Ｄ

及び

Ｂ
┣Ｃ
└Ｄ

となる。

これは

Ｄ─┐
│　│
Ｃ─┫
　　Ｂ

に対応する。

Ｂに対して同じことをすると

Ｂ
┣Ｃ
└Ｄ

Ａ
├Ｂ
└Ｃ

これを対応づけると、


Ｄ─┐
│　│
Ｃ─┫
│　Ｂ
Ａ─┘

言語中の各枝をすべて1回ずつ通り、そのタイミングで回路図が復元できた。

したがって、同じ意味の回路図と確認できた。

これが、強い一意性の確認である。


証明:

強い一意性は、

「素子がつながる順番」、「素子の向き」、「分岐の仕方」

が同じ回路を、一意に解釈できるという性質である。

「素子の向き」については素子自体にそれを記録しておけばよい(どの向きにどの素子が隣接しているか)

「分岐の仕方」と「素子がつながる順番」については、枝とノードの関係にすべて書き込まれているので、

実際に逆変換して、所望の回路図が得られるかを過不足なく確認できる。


吟味3-2-5 木構造言語の解析

例えば、NANDゲートとみなせる回路部分を「ＮＡＮＤ」素子に置き換えたい場合、次のようにすればよい。


NAND ::= NANDゲートの定義と強い一意性を持つ回路片


たったこれだけで解析ができてしまう(はずである。)








































(完全性は、「」を言えばよい。)




<!--

Ａ
├Ｂ
│├Ｃ
││├Ａ
│││└閉回路検知
││└Ｄ
││　├Ｂ
││　│└閉回路検知
││　└Ｃ
││　　└閉回路検知
│└Ｄ
└Ｃ

-->

3-2-2 木構造言語の強い一意性

一つの木構造言語とみなすべきものでも、順番によって複数の形で記述され得る。

例えば

Ａ─Ｃ─Ｄ
│　│　│
└Ｂ┻─┘

は、木構造言語では


<!--
Ａ
└Ｂ
　├Ｃ
　│└Ａ
　│　└閉回路検知
　└Ｄ
　　└Ｃ
　　　└閉回路検知
-->

となるが、同じ回路である

Ｄ─┐
│　│
Ｃ─┫
│　Ｂ
Ａ─┘

は

Ｄ
├┐
│├Ｂ
││└Ａ
││　└Ｃ
││　　└閉回路検知
│└Ｃ
│　├閉回路検知
│　└Ｄ
│　　└閉回路検知
└Ｃ

Ｃ
└Ａ
　└Ｂ
　　├Ｃ
　　│└閉回路検知
　　└Ｄ
　　　└自己閉回路検知※
　　　　└Ｃ
　　　　　└閉回路検知

　
<!--
但し、

〇→□→自己閉回路検知→△は、次のような回路片を意味する。  

〇┳─┳△
　│　│
　└□┘

-->

と書くことも出来る。これが同じであることをどう確認できるだろうか。

　
しかし、これだけだと、「→閉回路検知」に重なった部分が解析できないので、追加で

{Ｘと共通のアドレスを持つものから、矢印を逆順に追っていき「→閉回路検知」を置き換える}  :: = Ｘ→閉回路検知 ※2

という生成ルールを追加する。


※2の生成ルールを追加したことにより、このパーサは文脈自由文法では実現不可能となった。


# 回路言語

## (既存の)ハードウェア記述言語との違い
「2次元座標の各点に何があるか」を軸とする言語。

<!--
例えば

Ｂ=battery(type=V,value=5,dir=→)
Ｌ=LED(←)

┏Ｂ━┓
┃　　┃
┗Ｌ━┛

なら、
(0,0)は┏、(0,1)はＢ、(0,2)は━、(1,0)は┃のように。

しかし、行と列をふんだんに使うこのやり方では、処理がしにくいので、

(,0)=┏┃┗;
(,1)=Ｂ　Ｌ;
(,2)=━　━;
(,3)=┓┃┛;
のようにする。
-->

## 言語の開発

例として、トランジスタからＮＡＮＤゲートを構築し、ここからＸＯＲゲートを構築することを考える。  

### ＮＡＮＤゲート

ＮＡＮＤゲートをトランジスタで構成した時、次のようになる。  

```
// ＮＡＮＤ回路 http://www.gxk.jp/elec/musen/1ama/H12/figure/H1208A10aS.png

// 各部品を定義

□=coord(0,0);
Ｔ=bipolarTransistorNPN(B=←&C=↑&E=↓);
Ｒ=resistor(5);
ｖ=battery(5,V,↓);
Ｖ=battery(10,V,↑);
Ｅ=Earth();
Ａ=terminal(A,i);
Ｂ=terminal(B,i);
Ｏ=terminal(X,o);
Ｐ=terminal(zero,Earth);


// 回路を作る

　　　□　　　┌┳Ｏ
　　　┌Ｒ┳─ＴＲ
　　　Ａ　Ｒ　││
　　　　Ｒ┼┳ＴＶ
　　　　││Ｒ││
　　　Ｂ┘└┫││
　　　　　　ｖ││
　　　Ｅ──┻┻┻Ｐ

```

terminalとして与えられている部品は、A,B,O,Pの4つである。  
これらは4辺のいずれかに位置する必要がある。今回の例ではA,Bは左辺(上辺でも下辺でもない)、Oは右辺にして上辺、Pは右辺にして下辺に位置している(※)。  
導線の太字は交点の存在を意味する。また□は原点(0,0)を意味する。  
右に行くほどxがインクリメントされ、下に行くほどyがインクリメントされる。
例えば座標(0,2)はAであるし、(6,0)はOである。  

gate(NAND)を左辺、上に示した回路を右辺とする生成ルールを作る必要がある。  
しかし、そのままでは扱いにくいため、次のようにする。  

1. yの最大値+1を求める(今回は8)  
2. 次のように、縦の並びを横にしなおす。  

```
□┌Ａ　　Ｂ　Ｅ　Ｒ　Ｒ│┘　─　┳Ｒ┼│└　─　─　┳Ｒ┫ｖ┻┌Ｔ│Ｔ│││┻┳Ｒ│Ｖ│││┻Ｏ　　　　　　Ｐ

```

3. 左辺をgate(NAND)、右辺を上記とする生成規則を用意する。

並びの縦横が変わったものに関しては、別のプログラムで復元すればよい。  

### ＸＯＲゲート

ＸＯＲゲートをＮＡＮＤゲートで構成した時、次のようになる。

```
set following as gate(NAND)
{
    □=coord(-1,0);
    ａ=A;
    ｂ=B;
    ｘ=X;
    ×=forbidden();

}:
{
　□
　　ｘ
　　ａ×
　　ｂ×
　　×
}
|
{
　□
　　ｘ
　　ｂ×
　　ａ×
　　×
}
|
{
　□
　　×
　　ａｘ
　　ｂ×
　　×
};
□=coord(0,-1);
ａ=A.gate(NAND);
ｂ=B.gate(NAND);
ｘ=X.gate(NAND);
Ｃ=terminal(A,i);
Ｄ=terminal(B,i);
Ｑ=terminal(X,o);

　□


　Ｃ┳───ａｘ┐　┌Ｑ
　　└ａｘ┳ｂ　└ａｘ
　　┌ｂ　└ａｘ─ｂ
　Ｄ┻───ｂ
```

上記のset命令では、NANDゲートの形を定義している。  
aは「NANDゲート」の見出しで示すところのAに、bはBに、xはOに該当する。  
※より、例えばOは右辺かつ上辺に位置したが、このことを引き継ぎ、xも右辺かつ上辺に位置するようにする。  
A,Bは左辺であるが上辺でも下辺でもない。このことを満たすため、「配線不可の座標」である×も指定する。 
×を減らすには、出力端子はなるべく4隅に設置するのが望ましい(ＸＯＲゲートはそのようにできている) 。  

### 動作

```
　□
　Ｃ┳───ａｘ┐　┌Ｑ
　　└ａｘ┳ｂ　└ａｘ
　　┌ｂ　└ａｘ─ｂ
　Ｄ┻───ｂ

```
から  

```
ａｘ
ｂ
```

などNANDゲートを探し、  

```
　　　□　　　┌┳Ｏ
　　　┌Ｒ┳─ＴＲ
　　　Ａ　Ｒ　││
　　　　Ｒ┼┳ＴＶ
　　　　││Ｒ││
　　　Ｂ┘└┫││
　　　　　　ｖ││
　　　Ｅ──┻┻┻Ｐ

```
へ置き換えていく。  

まずは手動で置き換えてみよう。  
aをA、bをB、xをOで置き換え、亀裂を整える。(手順1)  
生じた亀裂を復元する。(手順2)  
埋め込む(手順3)  

#### 手順1
  
具体例を挙げよう。  
ａはＸＯＲゲートの座標系では例えば(5,0)に存在するが、これを(0',2')と呼ぶ。  
(これは、NANDゲートにおいて(0,2)にAが存在するからである。)
ＮＡＮＤゲートでは右下端の座標は(6,7)となる。  
そこで、(0',2')から(6',9')にＮＡＮＤゲートを埋め込むことを考える。  

言い換えると、(2,1)から(8,7)にＮＡＮＤゲートを埋め込むわけである。  
当然このことによって、互いに隣接していたｂ、ａ、ｘはそれぞれＢ、Ａ、Ｏとして、離れ離れになり、  
回路全体に「亀裂」が生じる。その様子を次の「＝＝」、「||||」にて示す。  
  
#### 手順1
  
具体例を挙げよう。  
ａはＸＯＲゲートの座標系では例えば(2,1)に存在するが、これを(0',2')と呼ぶ。  
(これは、NANDゲートにおいて(0,2)にAが存在するからである。)
ＮＡＮＤゲートでは右下端の座標は(6,7)となる。  
そこで、(0',2')から(6',9')にＮＡＮＤゲートを埋め込むことを考える。  

言い換えると、(2,1)から(8,8)にＮＡＮＤゲートを埋め込むわけである。  
当然このことによって、互いに隣接していたｂ、ａ、ｘはそれぞれＢ、Ａ、Ｏとして、離れ離れになり、  
回路全体に「亀裂」が生じる。その様子を次の「＝＝」、「||||」にて示す。  


```
　□
　Ｃ┳───ａｘ┐　┌Ｑ
　　└ａｘ┳ｂ　└ａｘ
　　┌ｂ　└ａｘ─ｂ
　Ｄ┻───ｂ

```


```
　□
　Ｃ┳─||||||||||──ａｘ┐　┌Ｑ
　＝＝　　　　　　Ｏ┳ｂ　└ａｘ
　＝＝　　　　　　　＝＝＝＝＝＝＝
　　└Ａ　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　　┌Ｂ　　　　　　└ａｘ─ｂ
　＝＝　　　　　　　＝＝＝＝＝＝＝
　＝＝　　　　　　　＝＝＝＝＝＝＝
　Ｄ┻─||||||||||──ｂ
```

#### 手順2

手順1で生じた亀裂を復元する。  

まず最優先で復元すべきなのは、ａ、ｂ、ｘの塊りの間に生じた亀裂である。  
各ａから、「＝」や「||」を一直線最遠方までたどった道筋を矢印で置き換えると次のようになる。  


```
　□
　Ｃ┳─||||||||||──ａｘ┐　┌Ｑ
　＝＝　　　　　　Ｏ┳ｂ　└ａｘ
　＝＝　　　　　　　＝↑＝＝↓＝＝
　　└Ａ　　　　　　＝↑＝＝↓＝＝
　＝＝　　　　　　　＝↑＝＝↓＝＝
　＝＝　　　　　　　＝↑＝＝↓＝＝
　　┌Ｂ　　　　　　└ａｘ─ｂ
　＝＝　　　　　　　＝↓＝＝＝＝＝
　＝＝　　　　　　　＝↓＝＝＝＝＝
　Ｄ┻─||||||||||──ｂ
```

ｂに(正しく)ぶつかった場合、それをａの隣まで移動させ、その経路を導線で置き換える。  
このことに寄与しなかった↑と↓は＝に、←と→は＝に再び置き換える。  

```
　□
　Ｃ┳─||||||||||──ａｘ┐　┌Ｑ
　＝＝　　　　　　Ｏ┳ｂ　└ａｘ
　＝＝　　　　　　　＝＝＝＝ｂ＝＝
　　└Ａ　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　　┌Ｂ　　　　　　└ａｘ─┘
　＝＝　　　　　　　＝ｂ＝＝＝＝＝
　＝＝　　　　　　　＝│＝＝＝＝＝
　Ｄ┻─||||||||||──┘
```

しかし、ｂは左から接続する必要があるので、次のように書き換える必要がある。  

```
　□
　Ｃ┳─||||||||||──ａｘ┐　┌Ｑ
　＝＝　　　　　　Ｏ┳ｂ　└ａｘ
　＝＝　　　　　　　＝＝＝┌ｂ＝＝
　　└Ａ　　　　　　＝＝＝└┐＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　＝＝　　　　　　　＝＝＝＝│＝＝
　　┌Ｂ　　　　　　└ａｘ─┘
　＝＝　　　　　　　┌ｂ＝＝＝＝＝
　＝＝　　　　　　　└┐＝＝＝＝＝
　Ｄ┻─||||||||||──┘
```

パターン1はパターン2のように置き換えられるべきである。  
  
パターン1  

```
('│' | '┳' | '┌' | '┐')//←正規表現。$1で参照。
＝
```

パターン2

```
($1)
│
```

上下逆や横の場合も同様のことがいえる。  

これを繰り返すと、次のようになる。  

```
　□
　Ｃ┳────────ａｘ┐　┌Ｑ
　＝│　　　　　　Ｏ┳ｂ　└ａｘ
　＝│　　　　　　　│＝＝┌ｂ＝＝
　　└Ａ　　　　　　│＝＝└┐＝＝
　＝＝　　　　　　　│＝＝＝│＝＝
　＝＝　　　　　　　│＝＝＝│＝＝
　　┌Ｂ　　　　　　└ａｘ─┘
　＝│　　　　　　　┌ｂ＝＝＝＝＝
　＝│　　　　　　　└┐＝＝＝＝＝
　Ｄ┻────────┘
```

亀裂のマークを取り除くと

```
　□
　Ｃ┳────────ａｘ┐　┌Ｑ
　　│　　　　　　Ｏ┳ｂ　└ａｘ
　　│　　　　　　　│　　┌ｂ　　
　　└Ａ　　　　　　│　　└┐　　
　　　　　　　　　　│　　　│　　
　　　　　　　　　　│　　　│　　
　　┌Ｂ　　　　　　└ａｘ─┘
　　│　　　　　　　┌ｂ　　　　　
　　│　　　　　　　└┐　　　　　
　Ｄ┻────────┘
```

#### 手順3

手順2までで、埋め込みに際する諸問題を取り除いてあるため、NANDゲートの中身をそのまま埋め込むだけでよい。  
NANDゲートを定義する座標における(x,y)は、XORゲートの座標(2+x,1+y)に写される。  

```
　□
　Ｃ┳────────ａｘ┐　┌Ｑ
　　│　　　　┌┳Ｏ┳ｂ　└ａｘ
　　│┌Ｒ┳─ＴＲ　│　　┌ｂ　　
　　└Ａ　Ｒ　││　│　　└┐　　
　　　　Ｒ┼┳ＴＶ　│　　　│　　
　　　　││Ｒ││　│　　　│　　
　　┌Ｂ┘└┫││　└ａｘ─┘
　　│　　　ｖ││　┌ｂ　　　　　
　　│Ｅ──┻┻┻Ｐ└┐　　　　　
　Ｄ┻────────┘
```

手順1から4に従い、残りのａ、ｂ、ｘも置き換えると、次のようになる。  
<!--  

```
　□
　Ｃ┳────────ａ||||||||||ｘ┐　┌Ｑ
　　│　　　　┌┳Ｏ┳ｂ||||||||||　└ａｘ
　　│┌Ｒ┳─ＴＲ　│　||||||||||　┌ｂ　　
　　└Ａ　Ｒ　││　│　||||||||||　└┐　　
　　　　Ｒ┼┳ＴＶ　│　||||||||||　　│　　
　　　　││Ｒ││　│　||||||||||　　│　　
　＝＝＝＝＝＝＝＝＝＝　　　　　　ｘ─┘＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝
　　┌Ｂ┘└┫││　└ａ　　　　　　＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝
　　│　　　ｖ││　┌ｂ　　　　　　　　　
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝　
　　│Ｅ──┻┻┻Ｐ└┐　||||||||||　　　　
　Ｄ┻────────┘　||||||||||

```


```
　□
　Ｃ┳────────ａｘ─────┐　┌Ｑ
　　│　　　　┌┳Ｏ┳ｂ　　　　　　└ａｘ
　　│┌Ｒ┳─ＴＲ　│　　　　　　　┌ｂ　　
　　└Ａ　Ｒ　││　│　　　　　　　└┐　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　│　　
　　　　││Ｒ││　│　　　　　　　　│　　
　　　　│││││　│　　　　┌┳Ｏ─┘　　
　　　　│││││　│┌Ｒ┳─ＴＲ　　　　　
　　┌Ｂ┘└┫││　└Ａ　Ｒ　││　　　　　
　　│　　　│││　　　Ｒ┼┳ＴＶ　　　　　
　　│　　　│││　　　││Ｒ││　　　　　
　　│　　　ｖ││　┌Ｂ┘└┫││　　　　
　　│　　　│││　│　　　ｖ││　　　　　
　　│　　　│││　│Ｅ──┻┻┻Ｐ　　　　　
　　│Ｅ──┻┻┻Ｐ└┐　　　　　　　　　　
　Ｄ┻────────┘　　　　　　

```

```
　□
　＝＝＝＝＝＝＝＝＝＝　　　　　　Ｏ─────┐　┌Ｑ
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝＝＝＝＝＝
　Ｃ┳────────Ａ　　　　　　＝＝＝＝＝＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝＝＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝＝＝＝＝＝
　　│　　　　┌┳Ｏ┳Ｂ　　　　　　　　　　　└ａｘ
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝＝＝＝＝＝
　＝＝＝＝＝＝＝＝＝＝　　　　　　　＝＝＝＝＝＝＝＝＝
　　│┌Ｒ┳─ＴＲ　│||||||||||　　　　　　　┌ｂ　　
　　└Ａ　Ｒ　││　│||||||||||　　　　　　　└┐　　
　　　　Ｒ┼┳ＴＶ　│||||||||||　　　　　　　　│　　
　　　　││Ｒ││　│||||||||||　　　　　　　　│　　
　　　　│││││　│||||||||||　　　　┌┳Ｏ─┘　　
　　　　│││││　│||||||||||┌Ｒ┳─ＴＲ　　　　　
　　┌Ｂ┘└┫││　└||||||||||Ａ　Ｒ　││　　　　　
　　│　　　│││　　||||||||||　Ｒ┼┳ＴＶ　　　　　
　　│　　　│││　　||||||||||　││Ｒ││　　　　　
　　│　　　ｖ││　┌||||||||||Ｂ┘└┫││　　　　
　　│　　　│││　│||||||||||　　　ｖ││　　　　　
　　│　　　│││　│||||||||||Ｅ──┻┻┻Ｐ　　　　　
　　│Ｅ──┻┻┻Ｐ└||||||||||┐　　　　　　　　　　
　Ｄ┻────────||||||||||┘　　　　　　

```

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ─────┐　┌Ｑ
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　│　
　Ｃ┳────────Ａ　Ｒ　││　　　　　　│　│　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　│　
　　│　　　　　　　　　││Ｒ││　　　　　　│　│　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　　　　　　└ａｘ
　　│　　　　││　│　　　ｖ││　　　　　　┌ｂ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　　└┐　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ─┘　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　
　　│　　　│││　│　　　　　　　　ｖ││　　　　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　
　　│Ｅ──┻┻┻Ｐ└─────┐　　　　　　　　　　
　Ｄ┻─────────────┘　　　　　　

```

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ─────┐　||||||||||┌Ｑ
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　||||||||||│　
　Ｃ┳────────Ａ　Ｒ　││　　　　　　│　||||||||||│　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　||||||||||│　
　　│　　　　　　　　　││Ｒ││　　　　　　│　||||||||||│
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝　　　　┌┳Ｏ
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　　　　　　└Ａ　Ｒ　││　
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝　Ｒ┼┳ＴＶ
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　　┌Ｂ┘└┫││
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝　　　ｖ││
　＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐||||||||||　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘||||||||||　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　　└┐||||||||||　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│||||||||||　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│||||||||||　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ─┘||||||||||　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　||||||||||　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　||||||||||　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　||||||||||　　
　　│　　　│││　　　　　　　　││Ｒ││　　　||||||||||　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　||||||||||　
　　│　　　│││　│　　　　　　　　ｖ││　　　||||||||||　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　||||||||||　　　
　　│Ｅ──┻┻┻Ｐ└─────┐　　　　　　　　||||||||||　　
　Ｄ┻─────────────┘　　　　　　　　||||||||||

```

-->

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ─────┐　　　　　　┌Ｑ
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　　　　　　│　
　Ｃ┳────────Ａ　Ｒ　││　　　　　　│　　　　　　│　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　　　　　　│　
　　│　　　　　　　　　││Ｒ││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　　　　　　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　　　　　　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　　　　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　　　　　　│　　　ｖ││
　　│　　　　││　│　　　│││　　　　　　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　　└┐　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ─┘　　　　　　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　　　　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　　　　　　
　　│　　　│││　│　　　　　　　　ｖ││　　　　　　　　　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ└─────┐　　　　　　　　　　　　　　　
　Ｄ┻─────────────┘　　　　　　　　　　　　　　　　　　　

```

### コンパクト化

では、ここで導線を短くし、回路をコンパクトにすることを考えよう。  

#### 面積法

導線を短くすること自体ではなく、回路をコンパクトにすることが目的である。  
つまり、面積が最小になるようにすればよい。  
出来上がったXORゲートの座標最大値(右端)は(30,27)であり、  
このことより縦28、横31とわかる。  
長方形とみなした時の面積は868であり、これを小さくするためには、  
下辺と右辺にある部品を上や左に移動ことを考えるべきである。  
例えば右辺にはQの部品があるが、これはもっとOに近づけることができる。  
下辺にはDがあるが、ここで導線を短くしても、EやPの存在のせいで、上に移動することはできない。  
  

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ─────┐　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　　　　　　│　　　　　　　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　　　　　　Ｑ　
　　│　　　　　　　　　││Ｒ││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　　　　　　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　　　　　　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　　　　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　　　　　　│　　　ｖ││
　　│　　　　││　│　　　│││　　　　　　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　　└┐　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ─┘　　　　　　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　　　　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　　　　　　
　　│　　　│││　│　　　　　　　　ｖ││　　　　　　　　　　
　　│　　　│││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　　　　　　　　
　Ｄ┻───────┘　　　　　　　　　　　　　　　　　　　

```
その場合は、EやPを上に持っていくことを考えたのち、再試行すればよい。  

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ─────┐　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　　　　　　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　　　　　　│　　　　　　　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　　　　　　│　　　　　　Ｑ　
　　│　　　　　　　　　││Ｒ││　　　　　　│　　　　　　│
　　│　　　　　　　　　│││││　　　　　　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　　　　　　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　　　　　　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　　　　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　　　　　　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　　　　　　│　　　ｖ││
　　│　　　　││　│　　　│││　　　　　　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ　　　　　└┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　　┌┘　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　　└┐　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　　　│　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ─┘　　　　　　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　　　　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　ｖ││　　　　　　　　　　
　Ｄ┻───────┘　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　　

```

同様のことを右辺、下辺に対して繰り返す。  

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ┐　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　│　　　　　　　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　│　　　　　　Ｑ　
　　│　　　　　　　　　││Ｒ││　│　　　　　　│
　　│　　　　　　　　　│││││　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　│　　　ｖ││
　　│　　　　││　│　　　│││　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ└───┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　　　│　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　　　　　　　│　　　　　　　
　　　　Ｒ┼┳ＴＶ　│　　　　　　　　　　　│　　　　　　　
　　　　││Ｒ││　│　　　　　　　　　　　│　　　　　　　
　　　　│││││　│　　　　　　　　　┌┳Ｏ　　　　　　　
　　　　│││││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　　　
　　┌Ｂ┘└┫││　└─────Ａ　Ｒ　││　　　　　　　　　　
　　│　　　│││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　　　
　　│　　　│││　　　　　　　　││Ｒ││　　　　　　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　ｖ││　　　　　　　　　　
　Ｄ┻───────┘　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　　　

```
(中略)  

<!--

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ┐　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　│　　　　　　　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　│　　　　　　Ｑ　
　　│　　　　　　　　　││Ｒ││　│　　　　　　│
　　│　　　　　　　　　│││││　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　│　　　ｖ││
　　│　　　　││　│　　　│││　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ└───┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　┌┳Ｏ　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　
　　　　Ｒ┼┳ＴＶ　└─────Ａ　Ｒ　││　　　　　　　
　　　　││Ｒ││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　
　　　　│││││　　　　　　　　││Ｒ││　　　　　　
　　　　│││││　┌─────Ｂ┘└┫││　　　　　　　　　
　　┌Ｂ┘└┫││　│　　　　　　　　ｖ││　　　　　　　
　　│　　　ｖ││　│　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　　　　　　　　
　Ｄ┻───────┘　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
```

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ┐　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　│　　　　　　　
　　│　　　　　　　　　Ｒ┼┳ＴＶ　│　　　　　　Ｑ　
　　│　　　　　　　　　││Ｒ││　│　　　　　　│
　　│　　　　　　　　　│││││　│　　　　┌┳Ｏ
　　│　　　　　　　　　│││││　│┌Ｒ┳─ＴＲ　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　└Ａ　Ｒ　││　
　　│　　　　││　│　　　│││　　　Ｒ┼┳ＴＶ
　　│　　　　││　│　　　│││　　　││Ｒ││
　　│　　　　││　│　　　ｖ││　┌Ｂ┘└┫││
　　│　　　　││　│　　　│││　│　　　ｖ││
　　│　　　　││　│　　　│││　│Ｅ──┻┻┻Ｐ　　
　　│　　　　││　│Ｅ──┻┻┻Ｐ└───┐　　　　　　　
　　│┌Ｒ┳─ＴＲ　│　　　　　　　　　┌┳Ｏ　　　　　　　
　　└Ａ　Ｒ　││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　　　
　　　　Ｒ┼┳ＴＶ　└─────Ａ　Ｒ　││　　　　　　　
　　　　││Ｒ││　　　　　　　　Ｒ┼┳ＴＶ　　　　　　　　
　　┌Ｂ┘└┫││　　　　　　　　││Ｒ││　　　　　　
　　│　　　ｖ││　┌─────Ｂ┘└┫││　　　　　　　　　
　　│Ｅ──┻┻┻Ｐ│　　　　　　　　ｖ││　　　　　　　
　Ｄ┻───────┘　　　　　Ｅ──┻┻┻Ｐ　　　　　　　　　
　　　　　　　　　　　　　　　
　
(右は単純には詰められなかった)　　　　　　　　

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
```
-->

```
　□
　　　　　　　　　　　　　　　┌┳Ｏ┐　　　　　　Ｑ　　　　　　
　　　　　　　　　　　┌Ｒ┳─ＴＲ　│　　　　　　│　　　　　　　
　Ｃ┳────────Ａ　Ｒ　││　│　　　　┌┳Ｏ
　　│　　　　　　　　　Ｒ┼┳ＴＶ　│┌Ｒ┳─ＴＲ　
　　│　　　　　　　　　││Ｒ││　└Ａ　Ｒ　││　
　　│　　　　　　　　　│││││　　　Ｒ┼┳ＴＶ
　　│　　　　　　　　　│││││　　　││Ｒ││　
　　│　　　　┌┳Ｏ┳Ｂ┘└┫││　┌Ｂ┘└┫││
　　│┌Ｒ┳─ＴＲ　│　　　ｖ││　│　　　ｖ││
　　└Ａ　Ｒ　││　│Ｅ──┻┻┻Ｐ│Ｅ──┻┻┻Ｐ
　　　　Ｒ┼┳ＴＶ　│　　　　　　　└───┐
　　　　││Ｒ││　│　　　　　　　　　┌┳Ｏ　　　　　
　　┌Ｂ┘└┫││　│　　　　　┌Ｒ┳─ＴＲ　　　　　　
　　│　　　ｖ││　└─────Ａ　Ｒ　││　　　　　　　
　　│Ｅ──┻┻┻Ｐ　　　　　　　Ｒ┼┳ＴＶ　　　　　　
　Ｄ┻───────┐　　　　　　││Ｒ││　　　　　　　　　
　　　　　　　　　　└─────Ｂ┘└┫││　　　　　　　
　　　　　　　　　　　　　　　　　　　ｖ││　　　　　　　　　
　　　　　　　　　　　　　　　　Ｅ──┻┻┻Ｐ
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
・・・※
```
#### 強制2距離法

全ての部品を互いに隣接させるか、あるいは2つ隣りにしようと試みるもの。  


### パーサによる回路読解

※のような、トランジスタでＮＡＮＤゲートを構成し、それらでＸＯＲゲートを合成したようなものを読み、  
ＸＯＲゲートの働きをするということを推測できる機械を開発したい。  
これは、アナログ回路と論理回路の双方の勉強につながる。  

今回仮定している言語で※を表すと、次のようになる。  

`□　　Ｃ　　　　　　　　　　　　Ｄ　　　　　　┳││││││└　　┌││┻　　　　　　─　　　　　┌Ａ　　Ｂ　Ｅ─　　　　　　─　　　　　Ｒ　Ｒ│┘　──　　　　　　─　　　　　┳Ｒ┼│└　──　　　　　　─　　　　　─　┳Ｒ┫ｖ┻─　　　　　　─　　　　┌Ｔ│Ｔ│││┻─　　　　　　─　　　　┳Ｒ│Ｖ│││┻─　　　　　　─　　　　Ｏ　　　　　　Ｐ─　　　　　　─　　　　┳│││││└　┐└　　　　┌Ａ　　　　Ｂ　Ｅ　　　─　　─　　　　Ｒ　Ｒ│││┘　─　　　─　　─　　　　┳Ｒ┼│││└　─　　　─　　─　　　　─　┳Ｒ││┫ｖ┻　　　─　　─　　　┌Ｔ│Ｔ│││││┻　　　─　　─　　　┳Ｒ│Ｖ│││││┻　　┌Ａ　　Ｂ　Ｅ　Ｏ　　　　　　　　Ｐ　　Ｒ　Ｒ│┘　─　┐│││└　　┌││└　┳Ｒ┼│└　─　　　　┌Ａ　　Ｂ　Ｅ─　─　┳Ｒ┫ｖ┻　　　　Ｒ　Ｒ│┘　──┌Ｔ│Ｔ│││┻　　　　┳Ｒ┼│└　──┳Ｒ│Ｖ│││┻　　　　─　┳Ｒ┫ｖ┻┐Ｏ　　　　　　Ｐ　　　┌Ｔ│Ｔ│││┻　　　　　　　　　　┳Ｒ│Ｖ│││┻　　　　　　　　Ｑ│Ｏ　　　Ｐ　　　　　　　`  

縦(y)の大きさをsとするとき、この言語では任意の座標のnつ下はn文字後、nつ右はs×n文字後に表現される。  

#### 連続

従って、「連続」は「互いにs文字あるいは1文字前後」として判定できる。  

これにより、バッカスナウア記法で回路図の各部分を表現することができる。  
例えば「AとBが連続したものを電池とする」場合は、  

`電池→(A[(....................)]B)|(B[(....................)]A)`  

という生成ルールに対応する。(s=20の場合)  

#### 閉路

A→B→C→D→E→F→G→H→(Aに戻る) により閉じられた閉路は純粋なバッカスナウア記法では表現できない(ようだ)が  

```
左連続(n,m)→m(....................)n  
右連続(n,m)→n(....................)m  
上連続(n,m)→mn  
下連続(n,m)→nm  
```

として、左連続と同じ回数だけ右連続、上連続と同じ回数だけした連続が起こりながら、A,B,C,D,E,F,G,H,Aがすべてこの順で連続であると確認できれば良い。  
無理やりバッカスナウアで書いてみると、  

```
前半閉路(A,B,C,D,E)→上連続(上連続(左連続(左連続(A,B),C),D),E)
後半閉路(A,H,G,F,E)→左連続(左連続(上連続(上連続(A,H),G),F),E)
閉路2(A,B,C,D,E,F,G,H)→前半閉路(A,B,C,D,E)..........................................後半閉路(A,H,G,F,E) 
閉路(A,B,C,D,E,F,G,H)→閉路2(A,B,C,D,E,F,G,H)|閉路2(B,C,D,E,F,G,H,A)|(中略)
.は2(1+s)回繰り返す
```

と表すことができるが、本質的ではない。(閉路の部品数が変わると、生成ルールも変わる)  
また、前半閉路と後半閉路に分けたのは、連続判定をしたとき、必ず左または上にポインタのようなものが移動し、右や下にこういったものは移動しえないからである。  
但し、「部分的に、右から左へ言語を読む(逆読み)」ことを許せば話は別で、もっとシンプルかつ一般的に閉路判定が行える。  
次のようにする。  

```
連続→左連続|右連続|上連続|下連続
左連続(n,m)→m(....................)n  
右連続(n,m)→逆読み(n(....................)m)  
上連続(n,m)→mn  
下連続(n,m)→逆読み(nm)
閉路(A,B,C,D,E,F,G,H)→連続(連続(...連続(連続(A=前,B),C),...H),前=A)
//A=前は、Aを前という文字で置き換える副作用を意味する
  
```

####分岐

##### T字分岐  



```
Ａ┳Ｂ
　Ｃ

Ａ┳Ｃ
　Ｂ

(中略)

Ｃ┳Ｂ
　Ａ

　Ｃ
Ａ┻Ｂ

(中略)

Ａ
┣Ｂ
Ｃ

(中略)

　Ａ
Ｂ┫
　Ｃ

```

これらはすべて同じことである。  
これを検知したい。  
罫線の形と部品の位置を定める。
あり得るものは(〇は部品)

```
〇┳〇　　〇
　〇　　〇┻〇

　〇　　〇
〇┫　　┣〇
　〇　　〇
```
である。  

これを順にタイプ1-1〜1-4と名付ける。  
(タイプ2は十字)  

Ｔ字分岐(A,B,C)→(タイプ1-1|タイプ1-2|タイプ1-3|タイプ1-4)(A,B,C)  
タイプ1-1(A,B,C)→Ａ...................┳Ｂ...................Ｃ │ Ａ...................┳Ｃ...................Ｂ (中略) 
タイプ1-2(A,B,C)→
(中略)



#### NANDゲートの検索  

バッカスナウアを用いて、NANDゲートを探し出そう。  
NANDゲートは次のような構成になっている。  

```

□=coord(0,0);
Ｔ=bipolarTransistorNPN(B=←&C=↑&E=↓);
Ｒ=resistor(5);
ｖ=battery(5,V,↓);
Ｖ=battery(10,V,↑);
Ｅ=Earth();
Ａ=terminal(A,i);
Ｂ=terminal(B,i);
Ｏ=terminal(X,o);
Ｐ=terminal(zero,Earth);



　　　□　　　┌┳Ｏ
　　　┌Ｒ┳─ＴＲ
　　　Ａ　Ｒ　││
　　　　Ｒ┼┳ＴＶ
　　　　││Ｒ││
　　　Ｂ┘└┫││
　　　　　　ｖ││
　　　Ｅ──┻┻┻Ｐ

```
NANDゲートの構成を説明してみると、次のようになる。  
A、R1が連続する。。  
R1はR2とT1ベースに分岐して連続する。  
T1コレクタはOとR3に分岐して連続する。  
R3、Vが連続する。
VはPとT2エミッタに分岐して連続する。  
T2コレクタはT1エミッタとR4とR2とR5に分岐してに連続する。  



```

<!--

□　　Ｃ　　　　　　　　　　　　Ｄ　　　
　　　┳││││││└　　┌││┻　　　
　　　─　　　　　┌Ａ　　Ｂ　Ｅ─　　　
　　　─　　　　　Ｒ　Ｒ│┘　──　　　
　　　─　　　　　┳Ｒ┼│└　──　　　
　　　─　　　　　─　┳Ｒ┫ｖ┻─　　　
　　　─　　　　┌Ｔ│Ｔ│││┻─　　　
　　　─　　　　┳Ｒ│Ｖ│││┻─　　　
　　　─　　　　Ｏ　　　　　　Ｐ─　　　
　　　─　　　　┳│││││└　┐└　　
　　┌Ａ　　　　Ｂ　Ｅ　　　─　　─　　
　　Ｒ　Ｒ│││┘　─　　　─　　─　　
　　┳Ｒ┼│││└　─　　　─　　─　　
　　─　┳Ｒ││┫ｖ┻　　　─　　─　　
　┌Ｔ│Ｔ│││││┻　　　─　　─　　
　┳Ｒ│Ｖ│││││┻　　┌Ａ　　Ｂ　Ｅ
　Ｏ　　　　　　　　Ｐ　　Ｒ　Ｒ│┘　─
　┐│││└　　┌││└　┳Ｒ┼│└　─
　　　　┌Ａ　　Ｂ　Ｅ─　─　┳Ｒ┫ｖ┻
　　　　Ｒ　Ｒ│┘　──┌Ｔ│Ｔ│││┻
　　　　┳Ｒ┼│└　──┳Ｒ│Ｖ│││┻
　　　　─　┳Ｒ┫ｖ┻┐Ｏ　　　　　　Ｐ
　　　┌Ｔ│Ｔ│││┻　　　　　　　
　　　┳Ｒ│Ｖ│││┻　　　　　　　
　Ｑ│Ｏ　　　Ｐ　　　　　　　


-->



